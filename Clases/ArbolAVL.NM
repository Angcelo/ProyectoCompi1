import
class ArbolAVL{
	
    NodoAVL raiz;

    ArbolAVL(){
	raiz = null;
    }

    void inorden() {
        println("Recorrido inorden del árbol AVL:");
        inorden(raiz);
        println("");
    }

    NodoAVL inorden(NodoAVL a) {
        if (a == null) {
            return null;
        }
        inorden(a.izquierdo);
        print(a.valor + ",");
        inorden(a.derecho);
        return null;
    }


    void preorden() {
        println("Recorrido preorden del árbol AVL:");
        preorden(raiz);
        println("");
    }

    NodoAVL preorden(NodoAVL a) {
        if (a == null) {
            return null;
        }
        print(a.valor + ",");
        preorden(a.izquierdo);
        preorden(a.derecho);
        return null;
    }

    void postorden() {
        println("Recorrido postorden del árbol AVL:");
        postorden(raiz);
        println("");
    }

    NodoAVL postorden(NodoAVL a) {
        if (a == null) {
            return null;
        }
        postorden(a.izquierdo);
        postorden(a.derecho);
        print(a.valor + ",");
        return null;
    }

    String getDot() {
        return raiz.getDot();
    }

    void insertar(int valor) {
        raiz = insertar(valor, raiz);
    }

    NodoAVL insertar(int val, NodoAVL raiz) {
        //Si en nodo recibido fuera nulo entonces el nuevo nodo se puede insertar 
        //en esa posición y se terminan las llamadas recursivas a este método.
        if (raiz == null) {
            raiz = new NodoAVL(val);
            //Si el nuevo valor fuera menor que el nodo de actual entonces
        } else if (val < raiz.valor) {
            //Se llama recursivamente al método para explorar el subarbol izquierdo
            //porque el valor a insertar es menor que el del nodo actual.
            raiz.izquierdo = insertar(val, raiz.izquierdo);
            if (altura(raiz.derecho) - altura(raiz.izquierdo) == -2) //Si el factor de equilibrio esta desbalanceado, hay que hacer 
            //rotación de nodos, como el fe=-2 hay dos posibilidades de 
            //rotación dependiendo de:
            {
                if (val < raiz.izquierdo.valor) //Si el nuevo valor fuera menor que la izquierda del nodo des-
                //balanceado, se sabe que el nuevo nodo será insertado a la 
                //izquierda de la actual izquierda, entonces tenemos una rotación 
                //simple por la izquierda o sea una IzquierdaIzquierda.
                {
                    raiz = IzquierdaIzquierda(raiz);
                } else //de lo contrario, se sabe que el nuevo nodo será insertado 
                //a la derecha del la actual izquierda, por lo que se tiene 
                //un caso de rotación doble por la izquierda 
                //o sea una IzquierdaDerecha.
                {
                    raiz = IzquierdaDerecha(raiz);
                }
            }
        } else if (val > raiz.valor) //Si el nuevo valor fuera mayor que el nodo de la actual entonces:
        {
            //Se llama recursivamente al método para explorar el subarbol derecho
            //porque el valor a insertar es mayor que el del nodo actual.            
            raiz.derecho = insertar(val, raiz.derecho);
            if (altura(raiz.derecho) - altura(raiz.izquierdo) == 2) //Si el factor de equilibrio esta desbalanceado, hay que hacer 
            //rotación de nodos, como el fe=2 hay dos posibilidades de 
            //rotación dependiendo de:                
            {
                if (val > raiz.derecho.valor) //Si el nuevo valor fuera mayor que la derecha del nodo des-
                //balanceado, se sabe que el nuevo nodo será insertado a la 
                //derecha de la actual derecha, entonces tenemos una rotación 
                //simple por la derecha o sea una DerechaDerecha.                    
                {
                    raiz = DerechaDerecha(raiz);
                } else //de lo contrario, se sabe que el nuevo nodo será insertado 
                //a la izquierda del la actual derecha, por lo que se tiene 
                //un caso de rotación doble por la derecha
                //o sea una DerechaIzquierda.
                {
                    raiz = DerechaIzquierda(raiz);
                }
            }
        } else // De lo contrario signifca que el valor que se quiere insertar ya existe, 
        //como no se permite la duplicidad de este dato no se hace nada.
        {
            println("No se permiten los valores duplicados: \""
                    + (val) + "\".");
        }

        //finalmente, por cada llamada recursiva debe hacerse una reasignacion 
        //de la altura esta se hará hasta para los nodos que no cambiaron de nivel 
        //en el transcurso porque no hay forma de saber cuales cambiaron de nivel 
        //y cuales no. La altura,será la altura del hijo que tiene
        //la altura más grande, es decir, la rama mas profunda, más 1.
        raiz.altura = mayor(altura(raiz.izquierdo), altura(raiz.derecho)) + 1;
        return raiz;
    }


    int altura(NodoAVL nodo) {
        if (nodo == null) {
            return -1;
        } else {
            return nodo.altura;
        }
    }


    int mayor(int n1, int n2) {
        //return n1 > n2 ? n1 : n2;

        if(n1 > n2){return n1;}else{return n2;}
    }

    
    NodoAVL IzquierdaIzquierda(NodoAVL n1) {
        NodoAVL n2 = n1.izquierdo;
        n1.izquierdo = n2.derecho;
        n2.derecho = n1;
        n1.altura = mayor(altura(n1.izquierdo), altura(n1.derecho)) + 1;
        n2.altura = mayor(altura(n2.izquierdo), n1.altura) + 1;
        return n2;
    }

    
    NodoAVL DerechaDerecha(NodoAVL n1) {
        NodoAVL n2 = n1.derecho;
        n1.derecho = n2.izquierdo;
        n2.izquierdo = n1;
        n1.altura = mayor(altura(n1.izquierdo), altura(n1.derecho)) + 1;
        n2.altura = mayor(altura(n2.derecho), n1.altura) + 1;
        return n2;
    }

    
    NodoAVL IzquierdaDerecha(NodoAVL n1) {
        n1.izquierdo = DerechaDerecha(n1.izquierdo);
        return IzquierdaIzquierda(n1);
    }

    
    NodoAVL DerechaIzquierda(NodoAVL n1) {
        n1.derecho = IzquierdaIzquierda(n1.derecho);
        return DerechaDerecha(n1);
    }

    void main(){
        int correlativo = 1;
        ArbolAVL arbol_numeros = new ArbolAVL();
        arbol_numeros.insertar(12);
        arbol_numeros.insertar(5);
        arbol_numeros.insertar(26);
        arbol_numeros.insertar(33);
        arbol_numeros.insertar(59);
        arbol_numeros.insertar(27);
        arbol_numeros.insertar(15);
        arbol_numeros.insertar(47);
        arbol_numeros.insertar(74);
        arbol_numeros.insertar(84);
        arbol_numeros.insertar(88);
        arbol_numeros.insertar(90);
        arbol_numeros.insertar(124);
        arbol_numeros.insertar(612);
        arbol_numeros.insertar(1024); 
        arbol_numeros.inorden();
        arbol_numeros.preorden();
        arbol_numeros.postorden();
        //String dot = arbol_numeros.getDot();
        //println(arbol_numeros.getDot());
        graficar_dot("dot", arbol_numeros.getDot());
        

	correlativo = 1;
        ArbolAVL arbol2 = new ArbolAVL();
        arbol2.insertar(12);
        arbol2.insertar(5);
        arbol2.insertar(26);
        arbol2.insertar(33);
        arbol2.insertar(59);
        arbol2.insertar(27);
        arbol2.insertar(15);
        arbol2.insertar(47);
        arbol2.inorden();
        arbol2.preorden();
        arbol2.postorden();
        graficar_dot("dot2", arbol2.getDot());

        graficar_entornos();
        
    }

}

