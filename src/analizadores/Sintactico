package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.expresiones.*;
import arbol.expresiones.aritmeticas.*;
import arbol.expresiones.comparacion.*;
import arbol.expresiones.logicas.*;
import arbol.instrucciones.*;
import arbol.instrucciones.control.*;
import arbol.entornos.*;
import proyectcompi1.ProyectCompi1;
import proyectcompi1.cError;

parser code 
{:   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST=new AST();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            cError error=new cError("Sintactico","No se esperaba este componente: " +s.value+".",s.left,s.right);
            ProyectCompi1.errores.add(error);
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            cError error=new cError("Sintactico","Error irrecuperable, componente " + s.value + " no reconocido.",s.left,s.right);
            ProyectCompi1.errores.add(error);
    }  
:} 

terminal String mas,menos,por,division,potencia,parizquierdo,parderecho,igual,puntoycoma,llaveizq,llaveder,rint,rdouble,rchar,rboolean,rstring,rclass,coma,rvoid;
terminal String entero,doble,rtrue,rfalse,cadena,caracter,id,rprintln,rprint;
terminal String menorque,mayorque,menorigualque,mayorigualque,igualigual,diferenteque,or,and,xor,not,rif,relse,rwhile,rbreak,rcontinue,modulo,rfor,rdo,rswitch,rcase,rdefault;
terminal String dospuntos,masmas,menosmenos,rreturn,corizquierdo,corderecho,rnew,punto,rnull,rimport,rgraficardot,rgraficarentorno; 

non terminal INICIO;
non terminal Integer DIMENSION;
non terminal LinkedList<Integer> DIMENSION2;
non terminal LinkedList<Instruccion> L_INSTRUCCIONES,GFM,PARAMETROS,L_IMPORT;
non terminal LinkedList<Expresion> V,PARAM2,PARAM2_;
non terminal Instruccion CLASS,IMPORT,RETURN,METFUN,GRAFICAR_ENTORNO,GRAFICAR_DOT,INSTRUCCION,DECLARACION,ASIGNACION, IMPRIMIR,BREAK, CONTINUE ,SENTENCIA_IF, SENTENCIA_WHILE, SENTENCIA_SWITCH,SENTENCIA_FOR,DECASIG,SENTENCIA_DOWHILE;
non terminal Expresion E,GE,HE,IE,EXPRESION,ID;
non terminal Tipo T,T2;
non terminal Arreglos LISTA_ARREGLO2,LISTA_ARREGLO;
non terminal LinkedList<CondicionIf> L_IF;
non terminal LinkedList<CondicionSwitch> L_CASOS;
non terminal Instrucciones INSTRUCT,BLOQUECLASS;


precedence right dospuntos;

precedence left or;
precedence left and;
precedence left xor;
precedence right not;
precedence left igualigual,diferenteque;
precedence left menorque,menorigualque,mayorque,mayorigualque;
precedence left mas,menos;
precedence left por,division,modulo;
precedence left potencia;
precedence left masmas,menosmenos; 
precedence left punto; 

start with INICIO;

INICIO::= CLASS:a {: parser.AST.SetInstrucciones(a); :}
;

CLASS ::= L_IMPORT:a rclass id:b BLOQUECLASS:c {: RESULT = new Clase(a,b,c,aleft,aright); :}
          |rclass id:a  BLOQUECLASS:b {: RESULT = new Clase(a,b,aleft,aright); :}
;

BLOQUECLASS ::= llaveizq:z llaveder:y     {: RESULT = new Instrucciones(); :}
                | llaveizq:z GFM:a llaveder:y {: RESULT = new Instrucciones(a); :}
;
     
L_IMPORT ::= L_IMPORT:a IMPORT:b {: a.add(b); RESULT=a; :}
             |IMPORT:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

IMPORT ::= rimport cadena:a puntoycoma {:RESULT=new Importar(a,aleft,aright); :}
;

GFM ::= GFM:a METFUN:b {:  a.add(b); RESULT = a; :}
        |GFM:a DECLARACION:b puntoycoma {: a.add(b); RESULT = a; :}
        |METFUN:a {: RESULT = new LinkedList(); RESULT.add(a); :}
        |DECLARACION:a puntoycoma{: RESULT = new LinkedList(); RESULT.add(a); :}
; 

DECLARACION ::=  T:a id:b {: RESULT = new Declaracion(a, b, bleft, bright); :}  
                |T:a id:b igual EXPRESION:c {: RESULT = new Declaracion(a, b, c, bleft, bright); :} 
                
;

METFUN ::= T:a id:b parizquierdo parderecho INSTRUCT:c {: RESULT = new DeclaracionMF(a, b, c, aleft, aright); :}
           |T:a id:b parizquierdo PARAMETROS:c parderecho INSTRUCT:d {: RESULT = new DeclaracionMF(a, b, c, d, aleft, aright); :}
           |id:a parizquierdo parderecho INSTRUCT:b {: RESULT = new DeclaracionMF(a, b, aleft, aright); :}
           |id:a parizquierdo PARAMETROS:b parderecho INSTRUCT:c {: RESULT = new DeclaracionMF(a, b, c, aleft, aright); :}
;

PARAMETROS ::= PARAMETROS:a coma T:b id:c {: Declaracion e=new Declaracion(b, c, bleft, bright); a.add(e); RESULT=a;:}
              |T:a id:b {: Declaracion e=new Declaracion(a, b, bleft, bright); RESULT=new LinkedList<>(); RESULT.add(e); :}
;

L_INSTRUCCIONES ::= L_INSTRUCCIONES:a INSTRUCCION:b {: a.add(b); RESULT = a; :}
                    | INSTRUCCION:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= DECLARACION:a puntoycoma {: RESULT = a; :}
            | ASIGNACION:a puntoycoma {: RESULT = a; :}
            | IMPRIMIR:a puntoycoma{: RESULT = a; :}
            | BREAK:a puntoycoma {: RESULT = a ;:}
            | CONTINUE:a puntoycoma {: RESULT = a;:}
            | SENTENCIA_IF:a {: RESULT = a; :}
            | SENTENCIA_WHILE:a {: RESULT = a; :}
            | SENTENCIA_SWITCH:a {: RESULT = a; :}
            | SENTENCIA_FOR:a {: RESULT=a; :}
            | SENTENCIA_DOWHILE:a puntoycoma {: RESULT=a; :}
            | GRAFICAR_DOT:a puntoycoma {: RESULT=a; :}
            | GRAFICAR_ENTORNO:a puntoycoma {: RESULT=a; :}
            | RETURN:a puntoycoma {: RESULT=a; :}
;

RETURN ::= rreturn E:a {: RESULT=new Return(a); :}
           |rreturn {: RESULT=new Return(); :}
;


SENTENCIA_SWITCH ::= rswitch parizquierdo E:a parderecho llaveizq L_CASOS:b llaveder {:RESULT =new Switch(a,b);:}            
;

L_CASOS ::= L_CASOS:a rcase E:b dospuntos L_INSTRUCCIONES:c {: a.add(new CondicionSwitch(b,c)) ; RESULT= a; :}
            |L_CASOS:a rdefault dospuntos L_INSTRUCCIONES:c {: a.add(new CondicionSwitch(c)) ;RESULT = a;:}
            |rcase E:b dospuntos L_INSTRUCCIONES:c {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b,c));:}
            |rdefault dospuntos L_INSTRUCCIONES:c {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(c));:}
            |L_CASOS:a rcase E:b dospuntos {: a.add(new CondicionSwitch(b)) ; RESULT= a; :}
            |L_CASOS:a rdefault dospuntos {: a.add(new CondicionSwitch()) ;RESULT = a;:}
            |rcase E:b dospuntos {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b));:}
            |rdefault dospuntos {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch());:}
;

SENTENCIA_FOR ::= rfor parizquierdo DECASIG:a puntoycoma E:b puntoycoma ASIGNACION:c parderecho INSTRUCT:d {: RESULT=new For(a,b,c,d); :}
;

DECASIG ::= DECLARACION:a {: RESULT=a; :}
            |ASIGNACION:a {: RESULT=a; :}
;

SENTENCIA_DOWHILE ::= rdo INSTRUCT:a rwhile parizquierdo E:b parderecho {: RESULT = new DoWhile(b, a); :}
;

GRAFICAR_DOT ::= rgraficardot parizquierdo E:a coma E:b parderecho{: RESULT = new GraficarDot(a,b); :}
;

GRAFICAR_ENTORNO ::= rgraficarentorno:a parizquierdo parderecho {: RESULT=new GraficarEntorno(aleft,aright); :}
;

BREAK ::= rbreak:a {:RESULT = new Break(aleft, aright);:}
;

CONTINUE ::= rcontinue:a {:RESULT = new Continue(aleft, aright);:}
;

SENTENCIA_WHILE ::= rwhile:z parizquierdo:x E:a parderecho:y INSTRUCT:b {: RESULT = new While (a, b) ;:} 
;

SENTENCIA_IF ::= L_IF:a relse:b INSTRUCT:c  {:RESULT = new If (a,c);:} 
        | L_IF:a {: RESULT = new If (a);:} 
;

L_IF ::= L_IF:a relse:z rif:y parizquierdo:x E:b parderecho:w INSTRUCT:c {: a.add(new CondicionIf (b, c)); RESULT=a; :} 
        |rif:z parizquierdo:x E:a parderecho:y INSTRUCT:b {: RESULT = new LinkedList<>(); RESULT.add(new CondicionIf (a, b));:} 
;

INSTRUCT ::= llaveizq:z llaveder:y     {: RESULT = new Instrucciones(); :}
        | llaveizq:z L_INSTRUCCIONES:a llaveder:y {: RESULT = new Instrucciones(a); :}
;

ASIGNACION ::= V:a igual EXPRESION:b {: RESULT=new Asignacion(a,aleft,aright,b); :}
              |V:a {: RESULT=new Asignacion(a,aleft,aright); :}
;

PARAM2 ::=  parizquierdo PARAM2_:a parderecho {: RESULT=a; :}
           |parizquierdo parderecho{: RESULT=new LinkedList(); :}
;

PARAM2_ ::= E:a {: RESULT=new LinkedList(); RESULT.add(a); :}
            |PARAM2_:a coma E:b {: a.add(b); RESULT=a; :}
;

T ::= rint {: RESULT = new Tipo(Tipo.EnumTipo.entero); :}
    | rchar {: RESULT = new Tipo(Tipo.EnumTipo.caracter); :}
    | rboolean {: RESULT = new Tipo(Tipo.EnumTipo.booleano); :}
    | rdouble {: RESULT = new Tipo(Tipo.EnumTipo.doble); :}
    | rstring {: RESULT = new Tipo(Tipo.EnumTipo.cadena); :}
    | rvoid:a {: RESULT=new Tipo(Tipo.EnumTipo.vacio); :}
    | id:a {: RESULT=new Tipo(Tipo.EnumTipo.objeto,a,-1); :}
    | rint DIMENSION:a {: RESULT = new Tipo(Tipo.EnumTipo.entero,"arreglo",a); :}
    | rchar DIMENSION:a {: RESULT = new Tipo(Tipo.EnumTipo.caracter,"arreglo",a); :}
    | rboolean DIMENSION:a {: RESULT = new Tipo(Tipo.EnumTipo.booleano,"arreglo",a); :}
    | rdouble DIMENSION:a {: RESULT = new Tipo(Tipo.EnumTipo.doble,"arreglo",a); :}
    | rstring DIMENSION:a {: RESULT = new Tipo(Tipo.EnumTipo.cadena,"arreglo",a); :}
    | id:a DIMENSION:b {: RESULT=new Tipo(Tipo.EnumTipo.objeto,a,b); :}
;

T2 ::= rint {: RESULT = new Tipo(Tipo.EnumTipo.entero); :}
    | rchar {: RESULT = new Tipo(Tipo.EnumTipo.caracter); :}
    | rboolean {: RESULT = new Tipo(Tipo.EnumTipo.booleano); :}
    | rdouble {: RESULT = new Tipo(Tipo.EnumTipo.doble); :}
    | rstring {: RESULT = new Tipo(Tipo.EnumTipo.cadena); :}
    | id:a {: RESULT = new Tipo(Tipo.EnumTipo.objeto,a,-1); :}
;

DIMENSION ::=  corizquierdo corderecho {: RESULT=1; :}
              |DIMENSION:a corizquierdo corderecho {: a+=1; RESULT=a; :}
;

DIMENSION2 ::=  corizquierdo entero:a corderecho {: RESULT=new LinkedList(); RESULT.add(Integer.parseInt(a)); :}
              |DIMENSION2:a corizquierdo entero:b corderecho {: RESULT=a; RESULT.add(Integer.parseInt(b)); :}
;

LISTA_ARREGLO ::=  llaveizq llaveder {: RESULT=new Arreglos(null); :}
                  |llaveizq PARAM2_:a llaveder {: RESULT=new Arreglos(a); :}
                  |llaveizq LISTA_ARREGLO2:a llaveder {: RESULT=a; :}
;

LISTA_ARREGLO2 ::=  LISTA_ARREGLO:a {: RESULT=new Arreglos(); RESULT.n.add(a); RESULT.Dimension(); :}
                  | LISTA_ARREGLO2:a coma LISTA_ARREGLO:b {: a.n.add(b); a.agregar(); RESULT=a; :}
;                  

IMPRIMIR ::= rprintln parizquierdo E:a parderecho {: RESULT = new Imprimir(a,true); :}
    | rprint parizquierdo E:a parderecho {: RESULT = new Imprimir(a,false); :}
;

EXPRESION ::=     E:a {: RESULT=a; :}
                | LISTA_ARREGLO:a {: RESULT=a; :}
;

E ::=     E:a or E:b {: RESULT = new Or(a, b, aleft,aright);:} 
        | E:a and E:b {: RESULT = new And(a,b,aleft,aright);:} 
        | E:a xor E:b {: RESULT = new Xor(a,b,aleft,aright);:}
        | E:a igualigual E:b {: RESULT = new Igual(a,b,aleft, aright);:}
        | E:a diferenteque E:b {: RESULT = new Diferente(a,b,aleft, aright);:}
        | E:a mayorque E:b {: RESULT = new Mayor(a,b,aleft, aright);:}
        | E:a menorque E:b {: RESULT = new Menor(a,b,aleft, aright);:}
        | E:a mayorigualque E:b {: RESULT = new MayorIgual(a,b,aleft, aright);:}
        | E:a menorigualque E:b {: RESULT = new MenorIgual(a,b,aleft, aright);:}
        | E:a mas E:b {: RESULT = new Suma(a, b, aleft, aright); :}
        | E:a menos E:b {: RESULT = new Resta (a, b, aleft, aright) ;:}
        | E:a por E:b {: RESULT = new Multiplicacion(a,b,aleft, aright);:}
        | E:a division E:b {: RESULT = new Division(a,b,aleft,aright); :}
        | E:a modulo E:b {: RESULT  = new Modulo(a,b,aleft,aright);:}
        | E:a potencia E:b{: RESULT = new Potencia(a,b,aleft,aright);:}
        | rnew T2:a DIMENSION2:b {: RESULT=new Arreglos(a,b); :}    
        | rnew T2:a PARAM2:b {: RESULT=new Instancia(a,b,aleft,aright); :}
        | IE:a {: RESULT=a; :}
;

IE  ::=   menos IE:a {: RESULT = new Negativo(a, aleft, aright); :}     
        | not IE:a {: RESULT =new Not(a, aleft,aright); :}
        | V:a {: RESULT=new Ejecutar(a,aleft,aright); :}   
;    

V ::=  ID:a punto V:b {: b.add(a); RESULT=b; :} 
      |ID:a {: RESULT=new LinkedList(); RESULT.add(a); :}
;

ID   ::= entero:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); :}
      | caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); :}
      | rtrue {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); :}
      | rfalse {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); :}
      | doble:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); :}
      | cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena),a); :}
      | rnull {: RESULT=new Literal(new Tipo(Tipo.EnumTipo.nulo), null); :}
      | id:a {: RESULT= new Id(a,aleft,aright); :}
      | id:a masmas {: RESULT= new Aumento(a,aleft,aright); :}
      | id:a menosmenos {:RESULT=new Decremento(a,aleft,aright); :} 
      | id:a PARAM2:b {: RESULT=new ExpresionMF(a,b,aleft,aright); :}
      | id:a DIMENSION2:b {: RESULT=new Id(a,b,aleft,aright); :}
      | parizquierdo E:a parderecho {: RESULT=a; :} 
;


