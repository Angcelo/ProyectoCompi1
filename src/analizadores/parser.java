
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.expresiones.*;
import arbol.expresiones.aritmeticas.*;
import arbol.expresiones.comparacion.*;
import arbol.expresiones.logicas.*;
import arbol.instrucciones.*;
import arbol.instrucciones.control.*;
import arbol.entornos.*;
import proyectcompi1.ProyectCompi1;
import proyectcompi1.cError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\003\000\002\014" +
    "\006\000\002\014\005\000\002\053\004\000\002\053\005" +
    "\000\002\010\004\000\002\010\003\000\002\015\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\003\000\002" +
    "\006\004\000\002\023\004\000\002\023\006\000\002\017" +
    "\007\000\002\017\010\000\002\017\006\000\002\017\007" +
    "\000\002\007\006\000\002\007\004\000\002\005\004\000" +
    "\002\005\003\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\016\004\000\002\016\003\000\002" +
    "\032\011\000\002\051\007\000\002\051\006\000\002\051" +
    "\006\000\002\051\005\000\002\051\006\000\002\051\005" +
    "\000\002\051\005\000\002\051\004\000\002\033\013\000" +
    "\002\034\003\000\002\034\003\000\002\035\010\000\002" +
    "\021\010\000\002\020\005\000\002\026\003\000\002\027" +
    "\003\000\002\031\007\000\002\030\005\000\002\030\003" +
    "\000\002\050\011\000\002\050\007\000\002\052\004\000" +
    "\002\052\005\000\002\024\005\000\002\024\003\000\002" +
    "\012\005\000\002\012\004\000\002\013\003\000\002\013" +
    "\005\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\003\004\000\002\003\005\000\002\004\005\000\002" +
    "\004\006\000\002\047\004\000\002\047\005\000\002\047" +
    "\005\000\002\046\003\000\002\046\005\000\002\025\006" +
    "\000\002\025\006\000\002\042\003\000\002\042\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\041" +
    "\004\000\002\041\003\000\002\011\005\000\002\011\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\006\024\005\076\006\001\002\000\006\024" +
    "\ufffa\076\ufffa\001\002\000\004\035\u010a\001\002\000\004" +
    "\033\u0108\001\002\000\004\002\000\001\002\000\004\002" +
    "\u0107\001\002\000\006\024\013\076\006\001\002\000\006" +
    "\024\ufffb\076\ufffb\001\002\000\004\035\014\001\002\000" +
    "\004\015\016\001\002\000\004\002\uffff\001\002\000\022" +
    "\016\032\017\031\020\027\021\021\022\025\023\023\026" +
    "\026\035\020\001\002\000\022\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\026\ufff6\035\ufff6\001\002\000" +
    "\010\011\u0101\035\uffb7\071\033\001\002\000\006\035\uffbc" +
    "\071\033\001\002\000\004\014\377\001\002\000\006\035" +
    "\uffb9\071\033\001\002\000\004\035\046\001\002\000\006" +
    "\035\uffbb\071\033\001\002\000\004\035\uffb8\001\002\000" +
    "\006\035\uffba\071\033\001\002\000\022\016\042\017\031" +
    "\020\027\021\021\022\025\023\023\026\026\035\020\001" +
    "\002\000\006\035\uffbd\071\033\001\002\000\004\002\ufffd" +
    "\001\002\000\004\072\037\001\002\000\006\035\uffb6\071" +
    "\035\001\002\000\004\072\036\001\002\000\006\035\uffa9" +
    "\071\uffa9\001\002\000\006\035\uffaa\071\uffaa\001\002\000" +
    "\022\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\026\ufff8\035\ufff8\001\002\000\004\014\043\001\002\000" +
    "\004\002\ufffc\001\002\000\022\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\026\ufff7\035\ufff7\001\002\000" +
    "\006\035\uffb3\071\035\001\002\000\006\035\uffb4\071\035" +
    "\001\002\000\010\011\047\013\050\014\ufff4\001\002\000" +
    "\022\012\202\017\031\020\027\021\021\022\025\023\023" +
    "\026\026\035\203\001\002\000\034\005\063\011\066\015" +
    "\071\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\056\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\012\uff82\013\uff82" +
    "\014\uff82\016\uff82\025\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\057\uff82" +
    "\065\uff82\074\uff82\001\002\000\056\004\uff81\005\uff81\006" +
    "\uff81\007\uff81\010\uff81\012\uff81\013\uff81\014\uff81\016\uff81" +
    "\025\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\057\uff81\065\uff81\074\uff81" +
    "\001\002\000\056\004\uff83\005\uff83\006\uff83\007\uff83\010" +
    "\uff83\012\uff83\013\uff83\014\uff83\016\uff83\025\uff83\040\uff83" +
    "\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\050\uff83\057\uff83\065\uff83\074\uff83\001\002\000\052" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\014" +
    "\uff89\016\uff89\025\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\057\uff89\065" +
    "\uff89\001\002\000\032\005\063\011\066\027\070\030\051" +
    "\031\056\032\053\033\052\034\061\035\065\051\055\073" +
    "\067\075\072\001\002\000\056\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\012\uff84\013\uff84\014\uff84\016\uff84\025" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\057\uff84\065\uff84\074\uff84\001" +
    "\002\000\052\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b" +
    "\012\uff8b\014\uff8b\016\uff8b\025\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\057\uff8b\065\uff8b\001\002\000\056\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\012\uff87\013\uff87\014\uff87\016\uff87" +
    "\025\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\057\uff87\065\uff87\074\177" +
    "\001\002\000\056\004\uff85\005\uff85\006\uff85\007\uff85\010" +
    "\uff85\012\uff85\013\uff85\014\uff85\016\uff85\025\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\057\uff85\065\uff85\074\uff85\001\002\000\006" +
    "\012\uff9e\014\uff9e\001\002\000\026\005\063\011\066\027" +
    "\070\030\051\031\056\032\053\033\052\034\061\035\065" +
    "\075\072\001\002\000\044\004\116\005\106\006\115\007" +
    "\111\010\101\012\uff9f\014\uff9f\040\117\041\103\042\112" +
    "\043\102\044\107\045\114\046\104\047\105\050\110\057" +
    "\113\001\002\000\066\004\uff7f\005\uff7f\006\uff7f\007\uff7f" +
    "\010\uff7f\011\154\012\uff7f\013\uff7f\014\uff7f\016\uff7f\025" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\057\uff7f\065\uff7f\066\172\067" +
    "\175\071\155\074\uff7f\001\002\000\032\005\063\011\066" +
    "\027\070\030\051\031\056\032\053\033\052\034\061\035" +
    "\065\051\055\073\067\075\072\001\002\000\016\017\145" +
    "\020\152\021\147\022\146\023\150\035\153\001\002\000" +
    "\056\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\012\uff86" +
    "\013\uff86\014\uff86\016\uff86\025\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\057\uff86\065\uff86\074\uff86\001\002\000\036\005\063\011" +
    "\066\015\071\016\100\027\070\030\051\031\056\032\053" +
    "\033\052\034\061\035\065\051\055\073\067\075\072\001" +
    "\002\000\056\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80" +
    "\012\uff80\013\uff80\014\uff80\016\uff80\025\uff80\040\uff80\041" +
    "\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80" +
    "\050\uff80\057\uff80\065\uff80\074\uff80\001\002\000\004\014" +
    "\ufff3\001\002\000\006\016\143\025\142\001\002\000\006" +
    "\016\uffa3\025\uffa3\001\002\000\006\016\140\025\137\001" +
    "\002\000\046\004\116\005\106\006\115\007\111\010\101" +
    "\012\uffbf\016\uffbf\025\uffbf\040\117\041\103\042\112\043" +
    "\102\044\107\045\114\046\104\047\105\050\110\057\113" +
    "\001\002\000\012\012\uffa6\014\uffa6\016\uffa6\025\uffa6\001" +
    "\002\000\032\005\063\011\066\027\070\030\051\031\056" +
    "\032\053\033\052\034\061\035\065\051\055\073\067\075" +
    "\072\001\002\000\032\005\063\011\066\027\070\030\051" +
    "\031\056\032\053\033\052\034\061\035\065\051\055\073" +
    "\067\075\072\001\002\000\032\005\063\011\066\027\070" +
    "\030\051\031\056\032\053\033\052\034\061\035\065\051" +
    "\055\073\067\075\072\001\002\000\032\005\063\011\066" +
    "\027\070\030\051\031\056\032\053\033\052\034\061\035" +
    "\065\051\055\073\067\075\072\001\002\000\032\005\063" +
    "\011\066\027\070\030\051\031\056\032\053\033\052\034" +
    "\061\035\065\051\055\073\067\075\072\001\002\000\032" +
    "\005\063\011\066\027\070\030\051\031\056\032\053\033" +
    "\052\034\061\035\065\051\055\073\067\075\072\001\002" +
    "\000\032\005\063\011\066\027\070\030\051\031\056\032" +
    "\053\033\052\034\061\035\065\051\055\073\067\075\072" +
    "\001\002\000\032\005\063\011\066\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\065\051\055\073\067" +
    "\075\072\001\002\000\032\005\063\011\066\027\070\030" +
    "\051\031\056\032\053\033\052\034\061\035\065\051\055" +
    "\073\067\075\072\001\002\000\032\005\063\011\066\027" +
    "\070\030\051\031\056\032\053\033\052\034\061\035\065" +
    "\051\055\073\067\075\072\001\002\000\032\005\063\011" +
    "\066\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\032\005" +
    "\063\011\066\027\070\030\051\031\056\032\053\033\052" +
    "\034\061\035\065\051\055\073\067\075\072\001\002\000" +
    "\032\005\063\011\066\027\070\030\051\031\056\032\053" +
    "\033\052\034\061\035\065\051\055\073\067\075\072\001" +
    "\002\000\032\005\063\011\066\027\070\030\051\031\056" +
    "\032\053\033\052\034\061\035\065\051\055\073\067\075" +
    "\072\001\002\000\032\005\063\011\066\027\070\030\051" +
    "\031\056\032\053\033\052\034\061\035\065\051\055\073" +
    "\067\075\072\001\002\000\052\004\116\005\106\006\115" +
    "\007\111\010\101\012\uff96\014\uff96\016\uff96\025\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\057\113\065\uff96\001\002\000\052\004" +
    "\uff93\005\uff93\006\115\007\111\010\101\012\uff93\014\uff93" +
    "\016\uff93\025\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\057\113\065\uff93" +
    "\001\002\000\052\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\101\012\uff91\014\uff91\016\uff91\025\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\057\uff91\065\uff91\001\002\000\052\004\116\005\106" +
    "\006\115\007\111\010\101\012\uff98\014\uff98\016\uff98\025" +
    "\uff98\040\117\041\103\042\112\043\102\044\uff98\045\uff98" +
    "\046\uff98\047\uff98\050\uff98\057\113\065\uff98\001\002\000" +
    "\052\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\101\012\uff8f" +
    "\014\uff8f\016\uff8f\025\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\057\uff8f" +
    "\065\uff8f\001\002\000\052\004\116\005\106\006\115\007" +
    "\111\010\101\012\uff94\014\uff94\016\uff94\025\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\057\113\065\uff94\001\002\000\052\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\101\012\uff90\014\uff90\016" +
    "\uff90\025\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\057\uff90\065\uff90\001" +
    "\002\000\052\004\116\005\106\006\115\007\111\010\101" +
    "\012\uff9b\014\uff9b\016\uff9b\025\uff9b\040\117\041\103\042" +
    "\112\043\102\044\107\045\114\046\uff9b\047\uff9b\050\uff9b" +
    "\057\113\065\uff9b\001\002\000\052\004\116\005\106\006" +
    "\115\007\111\010\101\012\uff99\014\uff99\016\uff99\025\uff99" +
    "\040\117\041\103\042\112\043\102\044\uff99\045\uff99\046" +
    "\uff99\047\uff99\050\uff99\057\113\065\uff99\001\002\000\052" +
    "\004\uff92\005\uff92\006\115\007\111\010\101\012\uff92\014" +
    "\uff92\016\uff92\025\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\057\113\065" +
    "\uff92\001\002\000\052\004\116\005\106\006\115\007\111" +
    "\010\101\012\uff9c\014\uff9c\016\uff9c\025\uff9c\040\117\041" +
    "\103\042\112\043\102\044\107\045\114\046\uff9c\047\uff9c" +
    "\050\110\057\113\065\uff9c\001\002\000\052\004\116\005" +
    "\106\006\115\007\111\010\101\012\uff9d\014\uff9d\016\uff9d" +
    "\025\uff9d\040\117\041\103\042\112\043\102\044\107\045" +
    "\114\046\uff9d\047\105\050\110\057\113\065\uff9d\001\002" +
    "\000\052\004\116\005\106\006\115\007\111\010\101\012" +
    "\uff97\014\uff97\016\uff97\025\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\057" +
    "\113\065\uff97\001\002\000\052\004\116\005\106\006\115" +
    "\007\111\010\101\012\uff95\014\uff95\016\uff95\025\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\057\113\065\uff95\001\002\000\052\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e" +
    "\016\uff8e\025\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\057\uff8e\065\uff8e" +
    "\001\002\000\032\005\063\011\066\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\065\051\055\073\067" +
    "\075\072\001\002\000\012\012\uffa5\014\uffa5\016\uffa5\025" +
    "\uffa5\001\002\000\046\004\116\005\106\006\115\007\111" +
    "\010\101\012\uffbe\016\uffbe\025\uffbe\040\117\041\103\042" +
    "\112\043\102\044\107\045\114\046\104\047\105\050\110" +
    "\057\113\001\002\000\004\015\071\001\002\000\012\012" +
    "\uffa4\014\uffa4\016\uffa4\025\uffa4\001\002\000\006\016\uffa2" +
    "\025\uffa2\001\002\000\006\011\uffb0\071\uffb0\001\002\000" +
    "\006\011\uffae\071\uffae\001\002\000\006\011\uffaf\071\uffaf" +
    "\001\002\000\006\011\uffac\071\uffac\001\002\000\006\011" +
    "\154\071\155\001\002\000\006\011\uffad\071\uffad\001\002" +
    "\000\006\011\uffab\071\uffab\001\002\000\034\005\063\011" +
    "\066\012\166\027\070\030\051\031\056\032\053\033\052" +
    "\034\061\035\065\051\055\073\067\075\072\001\002\000" +
    "\004\027\163\001\002\000\052\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\012\uff8c\014\uff8c\016\uff8c\025\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\057\uff8c\065\uff8c\001\002\000\054\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d" +
    "\016\uff8d\025\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\057\uff8d\065\uff8d" +
    "\071\160\001\002\000\004\027\161\001\002\000\004\072" +
    "\162\001\002\000\060\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\025\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\057\uffa7\065\uffa7\071\uffa7\074\uffa7\001" +
    "\002\000\004\072\164\001\002\000\060\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\016" +
    "\uffa8\025\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\057\uffa8\065\uffa8\071" +
    "\uffa8\074\uffa8\001\002\000\006\012\167\025\137\001\002" +
    "\000\056\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\016\uffc0\025\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\057\uffc0\065\uffc0\074\uffc0\001\002\000\056\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\016\uffc1\025\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\057\uffc1\065" +
    "\uffc1\074\uffc1\001\002\000\042\004\116\005\106\006\115" +
    "\007\111\010\101\012\171\040\117\041\103\042\112\043" +
    "\102\044\107\045\114\046\104\047\105\050\110\057\113" +
    "\001\002\000\056\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\025\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\057\uff7a\065\uff7a\074\uff7a\001\002\000\056" +
    "\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\016\uff7e\025\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\057" +
    "\uff7e\065\uff7e\074\uff7e\001\002\000\056\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\016" +
    "\uff7c\025\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\047\uff7c\050\uff7c\057\uff7c\065\uff7c\074" +
    "\uff7c\001\002\000\060\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\025\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\057\uff7b\065\uff7b\071\160\074\uff7b\001" +
    "\002\000\056\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\012\uff7d\013\uff7d\014\uff7d\016\uff7d\025\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\057\uff7d\065\uff7d\074\uff7d\001\002\000\052\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a\014\uff8a" +
    "\016\uff8a\025\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\057\uff8a\065\uff8a" +
    "\001\002\000\024\011\066\027\070\030\051\031\056\032" +
    "\053\033\052\034\061\035\065\075\072\001\002\000\054" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\012\uff88\013" +
    "\uff88\014\uff88\016\uff88\025\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\057" +
    "\uff88\065\uff88\001\002\000\052\004\116\005\106\006\115" +
    "\007\111\010\101\012\uff9a\014\uff9a\016\uff9a\025\uff9a\040" +
    "\117\041\103\042\112\043\102\044\107\045\114\046\uff9a" +
    "\047\uff9a\050\uff9a\057\113\065\uff9a\001\002\000\004\015" +
    "\213\001\002\000\006\035\uffb7\071\033\001\002\000\004" +
    "\035\374\001\002\000\006\012\206\025\207\001\002\000" +
    "\004\015\213\001\002\000\020\017\031\020\027\021\021" +
    "\022\025\023\023\026\026\035\203\001\002\000\004\035" +
    "\211\001\002\000\006\012\uffee\025\uffee\001\002\000\022" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\026" +
    "\ufff1\035\ufff1\001\002\000\072\011\066\016\224\017\031" +
    "\020\027\021\021\022\025\023\023\026\026\027\070\030" +
    "\051\031\056\032\053\033\052\034\061\035\244\036\237" +
    "\037\245\052\231\054\232\055\225\056\246\060\234\061" +
    "\253\062\226\070\222\075\072\077\252\100\250\001\002" +
    "\000\072\011\066\016\373\017\031\020\027\021\021\022" +
    "\025\023\023\026\026\027\070\030\051\031\056\032\053" +
    "\033\052\034\061\035\244\036\237\037\245\052\231\054" +
    "\232\055\225\056\246\060\234\061\253\062\226\070\222" +
    "\075\072\077\252\100\250\001\002\000\010\012\uffc2\013" +
    "\371\014\uffc2\001\002\000\004\035\370\001\002\000\004" +
    "\014\367\001\002\000\076\011\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\070\uffe5\075\uffe5\077\uffe5\100" +
    "\uffe5\001\002\000\004\014\366\001\002\000\034\005\063" +
    "\011\066\014\uffdc\027\070\030\051\031\056\032\053\033" +
    "\052\034\061\035\065\051\055\073\067\075\072\001\002" +
    "\000\076\011\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\052\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\070\uffeb\075\uffeb\077\uffeb\100\uffeb\001\002\000" +
    "\100\011\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\070\uffc5\075\uffc5\077\uffc5\100\uffc5\001\002" +
    "\000\004\014\uffcc\001\002\000\004\011\340\001\002\000" +
    "\004\014\337\001\002\000\004\014\336\001\002\000\004" +
    "\011\332\001\002\000\004\011\326\001\002\000\004\014" +
    "\325\001\002\000\004\011\313\001\002\000\076\011\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\052\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\070\uffe4" +
    "\075\uffe4\077\uffe4\100\uffe4\001\002\000\004\014\312\001" +
    "\002\000\004\011\307\001\002\000\100\011\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\052\uffc8\053\300\054\uffc8\055\uffc8\056" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\070\uffc8" +
    "\075\uffc8\077\uffc8\100\uffc8\001\002\000\076\011\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\070\uffe2\075" +
    "\uffe2\077\uffe2\100\uffe2\001\002\000\004\014\277\001\002" +
    "\000\004\014\276\001\002\000\022\011\154\013\uff7f\014" +
    "\uff7f\035\uffb7\066\172\067\175\071\274\074\uff7f\001\002" +
    "\000\004\011\271\001\002\000\004\014\uffcb\001\002\000" +
    "\004\014\270\001\002\000\004\011\266\001\002\000\076" +
    "\011\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\070\uffe3\075\uffe3\077\uffe3\100\uffe3\001\002\000\004\011" +
    "\261\001\002\000\004\015\213\001\002\000\004\054\255" +
    "\001\002\000\004\011\256\001\002\000\032\005\063\011" +
    "\066\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\042\004" +
    "\116\005\106\006\115\007\111\010\101\012\260\040\117" +
    "\041\103\042\112\043\102\044\107\045\114\046\104\047" +
    "\105\050\110\057\113\001\002\000\004\014\uffcf\001\002" +
    "\000\032\005\063\011\066\027\070\030\051\031\056\032" +
    "\053\033\052\034\061\035\065\051\055\073\067\075\072" +
    "\001\002\000\042\004\116\005\106\006\115\007\111\010" +
    "\101\025\263\040\117\041\103\042\112\043\102\044\107" +
    "\045\114\046\104\047\105\050\110\057\113\001\002\000" +
    "\032\005\063\011\066\027\070\030\051\031\056\032\053" +
    "\033\052\034\061\035\065\051\055\073\067\075\072\001" +
    "\002\000\042\004\116\005\106\006\115\007\111\010\101" +
    "\012\265\040\117\041\103\042\112\043\102\044\107\045" +
    "\114\046\104\047\105\050\110\057\113\001\002\000\004" +
    "\014\uffce\001\002\000\004\012\267\001\002\000\004\014" +
    "\uffcd\001\002\000\076\011\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\052\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\070\uffe0\075\uffe0\077\uffe0\100\uffe0" +
    "\001\002\000\032\005\063\011\066\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\065\051\055\073\067" +
    "\075\072\001\002\000\042\004\116\005\106\006\115\007" +
    "\111\010\101\012\273\040\117\041\103\042\112\043\102" +
    "\044\107\045\114\046\104\047\105\050\110\057\113\001" +
    "\002\000\004\014\uffa0\001\002\000\006\027\163\072\037" +
    "\001\002\000\006\035\uffb1\071\035\001\002\000\076\011" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\052\uffea\054\uffea\055\uffea" +
    "\056\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\070" +
    "\uffea\075\uffea\077\uffea\100\uffea\001\002\000\076\011\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\052\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\070\uffe9" +
    "\075\uffe9\077\uffe9\100\uffe9\001\002\000\006\015\213\052" +
    "\302\001\002\000\076\011\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\052\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\070\uffc9\075\uffc9\077\uffc9\100\uffc9" +
    "\001\002\000\004\011\303\001\002\000\032\005\063\011" +
    "\066\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\042\004" +
    "\116\005\106\006\115\007\111\010\101\012\305\040\117" +
    "\041\103\042\112\043\102\044\107\045\114\046\104\047" +
    "\105\050\110\057\113\001\002\000\004\015\213\001\002" +
    "\000\100\011\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\070\uffc7\075\uffc7\077\uffc7\100\uffc7\001" +
    "\002\000\032\005\063\011\066\027\070\030\051\031\056" +
    "\032\053\033\052\034\061\035\065\051\055\073\067\075" +
    "\072\001\002\000\042\004\116\005\106\006\115\007\111" +
    "\010\101\012\311\040\117\041\103\042\112\043\102\044" +
    "\107\045\114\046\104\047\105\050\110\057\113\001\002" +
    "\000\004\014\uffa1\001\002\000\076\011\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\070\uffe7\075\uffe7\077" +
    "\uffe7\100\uffe7\001\002\000\040\011\066\017\031\020\027" +
    "\021\021\022\025\023\023\026\026\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\244\075\072\001\002" +
    "\000\004\014\317\001\002\000\004\014\uffd1\001\002\000" +
    "\004\014\uffd0\001\002\000\032\005\063\011\066\027\070" +
    "\030\051\031\056\032\053\033\052\034\061\035\065\051" +
    "\055\073\067\075\072\001\002\000\042\004\116\005\106" +
    "\006\115\007\111\010\101\014\321\040\117\041\103\042" +
    "\112\043\102\044\107\045\114\046\104\047\105\050\110" +
    "\057\113\001\002\000\024\011\066\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\065\075\072\001\002" +
    "\000\004\012\323\001\002\000\004\015\213\001\002\000" +
    "\076\011\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\052\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\070\uffd2\075\uffd2\077\uffd2\100\uffd2\001\002\000\076" +
    "\011\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\052\uffde\054\uffde\055" +
    "\uffde\056\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\070\uffde\075\uffde\077\uffde\100\uffde\001\002\000\032\005" +
    "\063\011\066\027\070\030\051\031\056\032\053\033\052" +
    "\034\061\035\065\051\055\073\067\075\072\001\002\000" +
    "\042\004\116\005\106\006\115\007\111\010\101\012\330" +
    "\040\117\041\103\042\112\043\102\044\107\045\114\046" +
    "\104\047\105\050\110\057\113\001\002\000\004\015\213" +
    "\001\002\000\076\011\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\052" +
    "\uffca\054\uffca\055\uffca\056\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\064\uffca\070\uffca\075\uffca\077\uffca\100\uffca\001" +
    "\002\000\032\005\063\011\066\027\070\030\051\031\056" +
    "\032\053\033\052\034\061\035\065\051\055\073\067\075" +
    "\072\001\002\000\042\004\116\005\106\006\115\007\111" +
    "\010\101\012\334\040\117\041\103\042\112\043\102\044" +
    "\107\045\114\046\104\047\105\050\110\057\113\001\002" +
    "\000\004\015\213\001\002\000\100\011\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\070\uffc6\075" +
    "\uffc6\077\uffc6\100\uffc6\001\002\000\076\011\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\070\uffdf\075\uffdf" +
    "\077\uffdf\100\uffdf\001\002\000\076\011\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\070\uffe1\075\uffe1\077" +
    "\uffe1\100\uffe1\001\002\000\032\005\063\011\066\027\070" +
    "\030\051\031\056\032\053\033\052\034\061\035\065\051" +
    "\055\073\067\075\072\001\002\000\042\004\116\005\106" +
    "\006\115\007\111\010\101\012\342\040\117\041\103\042" +
    "\112\043\102\044\107\045\114\046\104\047\105\050\110" +
    "\057\113\001\002\000\004\015\343\001\002\000\006\063" +
    "\346\064\345\001\002\000\010\016\357\063\356\064\355" +
    "\001\002\000\004\065\353\001\002\000\032\005\063\011" +
    "\066\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\042\004" +
    "\116\005\106\006\115\007\111\010\101\040\117\041\103" +
    "\042\112\043\102\044\107\045\114\046\104\047\105\050" +
    "\110\057\113\065\350\001\002\000\076\011\066\016\uffd4" +
    "\017\031\020\027\021\021\022\025\023\023\026\026\027" +
    "\070\030\051\031\056\032\053\033\052\034\061\035\244" +
    "\036\237\037\245\052\231\054\232\055\225\056\246\060" +
    "\234\061\253\062\226\063\uffd4\064\uffd4\070\222\075\072" +
    "\077\252\100\250\001\002\000\076\011\066\016\uffd8\017" +
    "\031\020\027\021\021\022\025\023\023\026\026\027\070" +
    "\030\051\031\056\032\053\033\052\034\061\035\244\036" +
    "\237\037\245\052\231\054\232\055\225\056\246\060\234" +
    "\061\253\062\226\063\uffd8\064\uffd8\070\222\075\072\077" +
    "\252\100\250\001\002\000\076\011\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\052\uffec\054\uffec\055\uffec\056\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\070\uffec\075\uffec\077\uffec" +
    "\100\uffec\001\002\000\076\011\066\016\uffd3\017\031\020" +
    "\027\021\021\022\025\023\023\026\026\027\070\030\051" +
    "\031\056\032\053\033\052\034\061\035\244\036\237\037" +
    "\245\052\231\054\232\055\225\056\246\060\234\061\253" +
    "\062\226\063\uffd3\064\uffd3\070\222\075\072\077\252\100" +
    "\250\001\002\000\076\011\066\016\uffd7\017\031\020\027" +
    "\021\021\022\025\023\023\026\026\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\244\036\237\037\245" +
    "\052\231\054\232\055\225\056\246\060\234\061\253\062" +
    "\226\063\uffd7\064\uffd7\070\222\075\072\077\252\100\250" +
    "\001\002\000\004\065\363\001\002\000\032\005\063\011" +
    "\066\027\070\030\051\031\056\032\053\033\052\034\061" +
    "\035\065\051\055\073\067\075\072\001\002\000\076\011" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\052\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\070" +
    "\uffdb\075\uffdb\077\uffdb\100\uffdb\001\002\000\042\004\116" +
    "\005\106\006\115\007\111\010\101\040\117\041\103\042" +
    "\112\043\102\044\107\045\114\046\104\047\105\050\110" +
    "\057\113\065\361\001\002\000\076\011\066\016\uffd6\017" +
    "\031\020\027\021\021\022\025\023\023\026\026\027\070" +
    "\030\051\031\056\032\053\033\052\034\061\035\244\036" +
    "\237\037\245\052\231\054\232\055\225\056\246\060\234" +
    "\061\253\062\226\063\uffd6\064\uffd6\070\222\075\072\077" +
    "\252\100\250\001\002\000\076\011\066\016\uffda\017\031" +
    "\020\027\021\021\022\025\023\023\026\026\027\070\030" +
    "\051\031\056\032\053\033\052\034\061\035\244\036\237" +
    "\037\245\052\231\054\232\055\225\056\246\060\234\061" +
    "\253\062\226\063\uffda\064\uffda\070\222\075\072\077\252" +
    "\100\250\001\002\000\076\011\066\016\uffd5\017\031\020" +
    "\027\021\021\022\025\023\023\026\026\027\070\030\051" +
    "\031\056\032\053\033\052\034\061\035\244\036\237\037" +
    "\245\052\231\054\232\055\225\056\246\060\234\061\253" +
    "\062\226\063\uffd5\064\uffd5\070\222\075\072\077\252\100" +
    "\250\001\002\000\076\011\066\016\uffd9\017\031\020\027" +
    "\021\021\022\025\023\023\026\026\027\070\030\051\031" +
    "\056\032\053\033\052\034\061\035\244\036\237\037\245" +
    "\052\231\054\232\055\225\056\246\060\234\061\253\062" +
    "\226\063\uffd9\064\uffd9\070\222\075\072\077\252\100\250" +
    "\001\002\000\042\004\116\005\106\006\115\007\111\010" +
    "\101\014\uffdd\040\117\041\103\042\112\043\102\044\107" +
    "\045\114\046\104\047\105\050\110\057\113\001\002\000" +
    "\076\011\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\052\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\070\uffe6\075\uffe6\077\uffe6\100\uffe6\001\002\000\076" +
    "\011\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\052\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\070\uffe8\075\uffe8\077\uffe8\100\uffe8\001\002\000\006\013" +
    "\050\014\ufff4\001\002\000\034\005\063\011\066\015\071" +
    "\027\070\030\051\031\056\032\053\033\052\034\061\035" +
    "\065\051\055\073\067\075\072\001\002\000\006\012\uffc3" +
    "\014\uffc3\001\002\000\100\011\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\070\uffc4\075\uffc4\077" +
    "\uffc4\100\uffc4\001\002\000\006\012\uffed\025\uffed\001\002" +
    "\000\022\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\026\ufff2\035\ufff2\001\002\000\006\035\uffb2\071\035" +
    "\001\002\000\022\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\026\ufff5\035\ufff5\001\002\000\006\035\uffb5" +
    "\071\035\001\002\000\022\012\u0102\017\031\020\027\021" +
    "\021\022\025\023\023\026\026\035\203\001\002\000\004" +
    "\015\213\001\002\000\006\012\u0104\025\207\001\002\000" +
    "\004\015\213\001\002\000\022\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\026\uffef\035\uffef\001\002\000" +
    "\022\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\026\ufff0\035\ufff0\001\002\000\004\002\001\001\002\000" +
    "\004\014\u0109\001\002\000\006\024\ufff9\076\ufff9\001\002" +
    "\000\004\015\016\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\012\002\007\010\010\014\006\015\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\014" +
    "\001\001\000\002\001\001\000\012\006\027\017\016\023" +
    "\021\044\023\001\001\000\002\001\001\000\004\003\274" +
    "\001\001\000\004\003\377\001\001\000\002\001\001\000" +
    "\004\003\375\001\001\000\002\001\001\000\004\003\044" +
    "\001\001\000\002\001\001\000\004\003\043\001\001\000" +
    "\010\017\037\023\040\044\023\001\001\000\004\003\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\204\044\203\001\001\000\016\011" +
    "\053\036\063\041\056\042\072\043\057\047\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\053\036\200\041\056\043\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\053" +
    "\041\175\043\057\001\001\000\002\001\001\000\006\004" +
    "\173\012\172\001\001\000\012\011\053\036\167\041\056" +
    "\043\057\001\001\000\004\045\150\001\001\000\002\001" +
    "\001\000\020\011\053\013\075\036\076\041\056\043\057" +
    "\046\073\047\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\053\036" +
    "\135\041\056\043\057\001\001\000\012\011\053\036\134" +
    "\041\056\043\057\001\001\000\012\011\053\036\133\041" +
    "\056\043\057\001\001\000\012\011\053\036\132\041\056" +
    "\043\057\001\001\000\012\011\053\036\131\041\056\043" +
    "\057\001\001\000\012\011\053\036\130\041\056\043\057" +
    "\001\001\000\012\011\053\036\127\041\056\043\057\001" +
    "\001\000\012\011\053\036\126\041\056\043\057\001\001" +
    "\000\012\011\053\036\125\041\056\043\057\001\001\000" +
    "\012\011\053\036\124\041\056\043\057\001\001\000\012" +
    "\011\053\036\123\041\056\043\057\001\001\000\012\011" +
    "\053\036\122\041\056\043\057\001\001\000\012\011\053" +
    "\036\121\041\056\043\057\001\001\000\012\011\053\036" +
    "\120\041\056\043\057\001\001\000\012\011\053\036\117" +
    "\041\056\043\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\053\036\140\041\056\043\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\156\012\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\053\013\164\036\076\041\056\043" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\177\043\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\374\001\001\000\004\003\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\211\001\001" +
    "\000\004\044\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\213\011\214\016\232" +
    "\020\227\021\246\022\222\023\242\024\241\025\216\026" +
    "\235\027\220\030\217\031\234\032\250\033\240\035\226" +
    "\043\057\044\215\050\237\001\001\000\046\011\214\016" +
    "\232\020\227\021\246\022\351\023\242\024\241\025\216" +
    "\026\235\027\220\030\217\031\234\032\250\033\240\035" +
    "\226\043\057\044\215\050\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\053\036\364\041\056\043\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\274\004\173\012\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\053\036\256\041\056\043\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\053\036" +
    "\261\041\056\043\057\001\001\000\002\001\001\000\012" +
    "\011\053\036\263\041\056\043\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\053\036\271\041\056\043" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\053\036\303\041\056\043\057\001" +
    "\001\000\002\001\001\000\004\052\305\001\001\000\002" +
    "\001\001\000\012\011\053\036\307\041\056\043\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\214\023\314\024\315\034\313\043\057\044" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\053\036\317\041\056\043\057\001" +
    "\001\000\002\001\001\000\010\011\214\024\321\043\057" +
    "\001\001\000\002\001\001\000\004\052\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\053\036\326" +
    "\041\056\043\057\001\001\000\002\001\001\000\004\052" +
    "\330\001\001\000\002\001\001\000\012\011\053\036\332" +
    "\041\056\043\057\001\001\000\002\001\001\000\004\052" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\053\036\340\041\056\043\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\053\036\346\041\056\043\057\001\001\000\002\001\001" +
    "\000\050\005\350\011\214\016\232\020\227\021\246\022" +
    "\222\023\242\024\241\025\216\026\235\027\220\030\217" +
    "\031\234\032\250\033\240\035\226\043\057\044\215\050" +
    "\237\001\001\000\046\011\214\016\232\020\227\021\246" +
    "\022\351\023\242\024\241\025\216\026\235\027\220\030" +
    "\217\031\234\032\250\033\240\035\226\043\057\044\215" +
    "\050\237\001\001\000\002\001\001\000\050\005\353\011" +
    "\214\016\232\020\227\021\246\022\222\023\242\024\241" +
    "\025\216\026\235\027\220\030\217\031\234\032\250\033" +
    "\240\035\226\043\057\044\215\050\237\001\001\000\046" +
    "\011\214\016\232\020\227\021\246\022\351\023\242\024" +
    "\241\025\216\026\235\027\220\030\217\031\234\032\250" +
    "\033\240\035\226\043\057\044\215\050\237\001\001\000" +
    "\002\001\001\000\012\011\053\036\357\041\056\043\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\361\011\214\016\232\020\227\021\246\022\222\023\242" +
    "\024\241\025\216\026\235\027\220\030\217\031\234\032" +
    "\250\033\240\035\226\043\057\044\215\050\237\001\001" +
    "\000\046\011\214\016\232\020\227\021\246\022\351\023" +
    "\242\024\241\025\216\026\235\027\220\030\217\031\234" +
    "\032\250\033\240\035\226\043\057\044\215\050\237\001" +
    "\001\000\050\005\363\011\214\016\232\020\227\021\246" +
    "\022\222\023\242\024\241\025\216\026\235\027\220\030" +
    "\217\031\234\032\250\033\240\035\226\043\057\044\215" +
    "\050\237\001\001\000\046\011\214\016\232\020\227\021" +
    "\246\022\351\023\242\024\241\025\216\026\235\027\220" +
    "\030\217\031\234\032\250\033\240\035\226\043\057\044" +
    "\215\050\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\053\036" +
    "\063\041\056\042\371\043\057\047\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u0102\044\203\001\001\000\004\052\u0105\001" +
    "\001\000\002\001\001\000\004\052\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u010a\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST=new AST();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            cError error=new cError("Sintactico","No se esperaba este componente: " +s.value+".",s.left,s.right);
            ProyectCompi1.errores.add(error);
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            cError error=new cError("Sintactico","Error irrecuperable, componente " + s.value + " no reconocido.",s.left,s.right);
            ProyectCompi1.errores.add(error);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.AST.SetInstrucciones(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASS ::= L_IMPORT rclass id BLOQUECLASS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Clase(a,b,c,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASS ::= rclass id BLOQUECLASS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Clase(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUECLASS ::= llaveizq llaveder 
            {
              Instrucciones RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instrucciones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUECLASS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUECLASS ::= llaveizq GFM llaveder 
            {
              Instrucciones RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instrucciones(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUECLASS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORT ::= L_IMPORT IMPORT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IMPORT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_IMPORT ::= IMPORT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IMPORT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORT ::= rimport cadena puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Importar(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GFM ::= GFM METFUN 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GFM ::= GFM DECLARACION puntoycoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GFM ::= METFUN 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GFM ::= DECLARACION puntoycoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= T id 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= T id igual EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METFUN ::= T id parizquierdo parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionMF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METFUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METFUN ::= T id parizquierdo PARAMETROS parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones d = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionMF(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METFUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METFUN ::= id parizquierdo parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionMF(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METFUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METFUN ::= id parizquierdo PARAMETROS parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionMF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METFUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= PARAMETROS coma T id 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Declaracion e=new Declaracion(b, c, bleft, bright); a.add(e); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= T id 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Declaracion e=new Declaracion(a, b, bleft, bright); RESULT=new LinkedList<>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L_INSTRUCCIONES ::= L_INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= BREAK puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CONTINUE puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= SENTENCIA_DOWHILE puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= GRAFICAR_DOT puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= GRAFICAR_ENTORNO puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= RETURN puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURN ::= rreturn E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Return(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURN ::= rreturn 
            {
              Instruccion RESULT =null;
		 RESULT=new Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_SWITCH ::= rswitch parizquierdo E parderecho llaveizq L_CASOS llaveder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CondicionSwitch> b = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new Switch(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_CASOS ::= L_CASOS rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(b,c)) ; RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_CASOS ::= L_CASOS rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(c)) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_CASOS ::= rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b,c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_CASOS ::= rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_CASOS ::= L_CASOS rcase E dospuntos 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(new CondicionSwitch(b)) ; RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_CASOS ::= L_CASOS rdefault dospuntos 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 a.add(new CondicionSwitch()) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L_CASOS ::= rcase E dospuntos 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_CASOS ::= rdefault dospuntos 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= rfor parizquierdo DECASIG puntoycoma E puntoycoma ASIGNACION parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones d = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new For(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECASIG ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECASIG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECASIG ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECASIG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_DOWHILE ::= rdo INSTRUCT rwhile parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(b, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GRAFICAR_DOT ::= rgraficardot parizquierdo E coma E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new GraficarDot(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICAR_DOT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GRAFICAR_ENTORNO ::= rgraficarentorno parizquierdo parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new GraficarEntorno(aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICAR_ENTORNO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BREAK ::= rbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Break(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTINUE ::= rcontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Continue(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_WHILE ::= rwhile parizquierdo E parderecho INSTRUCT 
            {
              Instruccion RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While (a, b) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_IF ::= L_IF relse INSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If (a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_IF ::= L_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If (a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_IF ::= L_IF relse rif parizquierdo E parderecho INSTRUCT 
            {
              LinkedList<CondicionIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionIf (b, c)); RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_IF ::= rif parizquierdo E parderecho INSTRUCT 
            {
              LinkedList<CondicionIf> RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new CondicionIf (a, b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCT ::= llaveizq llaveder 
            {
              Instrucciones RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instrucciones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCT ::= llaveizq L_INSTRUCCIONES llaveder 
            {
              Instrucciones RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instrucciones(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= V igual EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Asignacion(a,aleft,aright,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= V 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Asignacion(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM2 ::= parizquierdo PARAM2_ parderecho 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM2 ::= parizquierdo parderecho 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT=new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAM2_ ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LinkedList(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM2_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAM2_ ::= PARAM2_ coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM2_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T ::= rint 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.doble); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // T ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // T ::= rvoid 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Tipo(Tipo.EnumTipo.vacio); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T ::= id 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Tipo(Tipo.EnumTipo.objeto,a,-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T ::= rint DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.entero,"arreglo",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= rchar DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter,"arreglo",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T ::= rboolean DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano,"arreglo",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T ::= rdouble DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.doble,"arreglo",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= rstring DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena,"arreglo",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T ::= id DIMENSION 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Tipo(Tipo.EnumTipo.objeto,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T2 ::= rint 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T2 ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T2 ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T2 ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.doble); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T2 ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T2 ::= id 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.objeto,a,-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DIMENSION ::= corizquierdo corderecho 
            {
              Integer RESULT =null;
		 RESULT=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DIMENSION ::= DIMENSION corizquierdo corderecho 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 a+=1; RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DIMENSION2 ::= corizquierdo entero corderecho 
            {
              LinkedList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new LinkedList(); RESULT.add(Integer.parseInt(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSION2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DIMENSION2 ::= DIMENSION2 corizquierdo entero corderecho 
            {
              LinkedList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Integer> a = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; RESULT.add(Integer.parseInt(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSION2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_ARREGLO ::= llaveizq llaveder 
            {
              Arreglos RESULT =null;
		 RESULT=new Arreglos(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA_ARREGLO ::= llaveizq PARAM2_ llaveder 
            {
              Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Arreglos(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_ARREGLO ::= llaveizq LISTA_ARREGLO2 llaveder 
            {
              Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglos a = (Arreglos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_ARREGLO2 ::= LISTA_ARREGLO 
            {
              Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglos a = (Arreglos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Arreglos(); RESULT.n.add(a); RESULT.Dimension(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_ARREGLO2 ::= LISTA_ARREGLO2 coma LISTA_ARREGLO 
            {
              Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arreglos a = (Arreglos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglos b = (Arreglos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.n.add(b); a.agregar(); RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IMPRIMIR ::= rprintln parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IMPRIMIR ::= rprint parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= LISTA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglos a = (Arreglos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E xor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= not E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new Not(a, aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Igual(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diferente(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mayor(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menor(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E mayorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorIgual(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E menorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgual(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta (a, b, aleft, aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E division E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new Modulo(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Potencia(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= rnew T2 DIMENSION2 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Integer> b = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Arreglos(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= rnew T2 PARAM2 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Instancia(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= IE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IE ::= menos IE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Negativo(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IE ::= V 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Ejecutar(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // V ::= ID punto V 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.add(a); RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // V ::= ID 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LinkedList(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ID ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ID ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ID ::= rtrue 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ID ::= rfalse 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ID ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ID ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena),a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ID ::= rnull 
            {
              Expresion RESULT =null;
		 RESULT=new Literal(new Tipo(Tipo.EnumTipo.nulo), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ID ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Id(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ID ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Aumento(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ID ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Decremento(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ID ::= id PARAM2 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ExpresionMF(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ID ::= id DIMENSION2 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Integer> b = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Id(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ID ::= parizquierdo E parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
